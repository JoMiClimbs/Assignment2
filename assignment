## Put comments here that give an overall description of what your
## functions do

## Write a short comment describing this function

## Make CacheMatrix function: Creates special "matrix" obect that can cache inverse

MakeCacheMatrix <- function(x = matrix()) {
  CacheInverse <- NULL
  set <- function(y) { 
    x <<- y
    CacheInverse <<- NULL
  }
  get <- function() x
  SetInverse <- function(inverse) CacheInverse <<- inverse
  GetInverse <- function() CacheInverse
  list(set = set, get = get,
       SetInverse = SetInverse,
       GetInverse = GetInverse)
}


## Write a short comment describing this function

## cacheSolve function: Computes inverse of the special "matrix" returned by makeCacheMatrix
## NOTE: If inverse already calculated (and the matrix has not changed then cacheSolve should retrieve the inverse from the cache)
CacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
  inv <- x$GetInverse()
  if (!is.null(inv)) {
    message("getting cached data")
    return(inv)
  }
  data <- x$get()
  inv <- solve(data)
  x$SetInverse(inv)
  inv
}
